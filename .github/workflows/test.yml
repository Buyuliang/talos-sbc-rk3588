jobs:
  sbc-rk3588:
    permissions:
      actions: read
      contents: write
      issues: read
      packages: write
      pull-requests: read
    runs-on: ubuntu-latest  # 使用 GitHub 提供的托管 runner
    if: (!startsWith(github.head_ref, 'renovate/') && !startsWith(github.head_ref, 'dependabot/'))
    outputs:
      SBC_RK3588_TAG: ${{ steps.build-overlay.outputs.SBC_RK3588_TAG }}
    strategy:
      matrix:
        kernel:
          - bsp
    env:
      KERNEL_VARIANT: ${{ matrix.kernel }}
    steps:
      - name: gather-system-info
        id: system-info
        uses: kenchan0130/actions-system-info@v1.3.0
        continue-on-error: true
      - name: print-system-info
        run: |
          MEMORY_GB=$((${{ steps.system-info.outputs.totalmem }}/1024/1024/1024))

          OUTPUTS=(
            "CPU Core: ${{ steps.system-info.outputs.cpu-core }}"
            "CPU Model: ${{ steps.system-info.outputs.cpu-model }}"
            "Hostname: ${{ steps.system-info.outputs.hostname }}"
            "NodeName: ${NODE_NAME}"
            "Kernel release: ${{ steps.system-info.outputs.kernel-release }}"
            "Kernel version: ${{ steps.system-info.outputs.kernel-version }}"
            "Name: ${{ steps.system-info.outputs.name }}"
            "Platform: ${{ steps.system-info.outputs.platform }}"
            "Release: ${{ steps.system-info.outputs.release }}"
            "Total memory: ${MEMORY_GB} GB"
          )

          for OUTPUT in "${OUTPUTS[@]}";do
            echo "${OUTPUT}"
          done
        continue-on-error: true
      - name: Build RK3588 overlay
        id: build-overlay
        run: |
          docker buildx create --driver docker-container  --driver-opt network=host --name local1 --buildkitd-flags '--allow-insecure-entitlement security.insecure' --use
          make talos-kernel-rk3588-${{ matrix.kernel }} talos-sbc-rk3588-${{ matrix.kernel }}
          echo "SBC_RK3588_TAG=$(git describe --tag --always --dirty --match 'v[0-9]*')" >> "$GITHUB_OUTPUT"
      - name: Push RK3588 overlay to local registry
        if: github.event_name != 'pull_request'
        run: |
          # 推送到本地的 Docker registry
          docker tag talos-kernel-rk3588-${{ matrix.kernel }} localhost:5000/talos-kernel-rk3588-${{ matrix.kernel }}:${{ steps.build-overlay.outputs.SBC_RK3588_TAG }}
          docker tag talos-sbc-rk3588-${{ matrix.kernel }} localhost:5000/talos-sbc-rk3588-${{ matrix.kernel }}:${{ steps.build-overlay.outputs.SBC_RK3588_TAG }}
          docker push localhost:5000/talos-kernel-rk3588-${{ matrix.kernel }}:${{ steps.build-overlay.outputs.SBC_RK3588_TAG }}
          docker push localhost:5000/talos-sbc-rk3588-${{ matrix.kernel }}:${{ steps.build-overlay.outputs.SBC_RK3588_TAG }}
      - name: Checkout upstream Talos repo
        uses: actions/checkout@v4
        with:
          repository: siderolabs/talos
          ref: ${{ env.TALOS_VERSION }}
          fetch-depth: 0
          path: ./talos
      - name: Patch upstream Talos
        working-directory: ./talos
        run: |
          git config --global user.email "ci-noreply@milas.dev"
          git config --global user.name "Build User"
          find ../hack/patches/talos \
            -name '*.patch' \
            -type f \
            -print0 \
          | sort -z \
          | xargs -r0 git am --whitespace=fix

      - name: Build RK3588 Talos imager
        working-directory: ./talos
        run: |
          make imager \
            PKG_KERNEL="localhost:5000/talos-kernel-rk3588-${{ matrix.kernel }}:${{ steps.build-overlay.outputs.SBC_RK3588_TAG }}" \
            TAG=${{ steps.build-overlay.outputs.SBC_RK3588_TAG }}
      - name: Push RK3588 Talos imager to local registry
        if: github.event_name != 'pull_request'
        working-directory: ./talos
        run: |
          make imager \
            PKG_KERNEL="localhost:5000/talos-kernel-rk3588-${{ matrix.kernel }}:${{ steps.build-overlay.outputs.SBC_RK3588_TAG }}" \
            TAG=${{ steps.build-overlay.outputs.SBC_RK3588_TAG }}-${{ matrix.kernel }} \
            PUSH=true
  boards:
    permissions:
      contents: write
      packages: write
    needs: [sbc-rk3588]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest  # 使用 GitHub 提供的托管 runner
    strategy:
      matrix:
        kernel:
          - bsp
        board:
          - name: rock-5b
            chipset: rk3588
    env:
      SBC_RK3588_TAG: ${{ needs.sbc-rk3588.outputs.SBC_RK3588_TAG }}
    steps:
      - name: Build installer image
        if: github.event_name != 'pull_request'
        run: |
          docker run --rm -t -v ./_out:/out -v /dev:/dev --privileged localhost:5000/imager:${{ env.SBC_RK3588_TAG }}-${{ matrix.kernel }} \
            installer --arch arm64 \
              --base-installer-image="localhost:5000/installer:${{ env.TALOS_VERSION }}" \
              --overlay-name=rk3588 \
              --overlay-image=localhost:5000/talos-sbc-rk3588:${{ env.SBC_RK3588_TAG }} \
              --overlay-option="board=${{ matrix.board.name }}" \
              --overlay-option="chipset=${{ matrix.board.chipset }}" \
              --system-extension-image="${{ env.REALKTEK_FIRMWARE_EXTENSION_IMAGE }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Push installer image to local registry
        if: github.event_name != 'pull_request'
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | crane auth login localhost:5000 --username "${{ env.USERNAME }}" --password-stdin
          crane push _out/installer-arm64.tar localhost:5000/talos-rk3588:${{ env.SBC_RK3588_TAG }}-${{ matrix.board.name }}-${{ matrix.kernel }}

      - name: Build flashable image
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          docker run --rm -t -v ./_out:/out -v /dev:/dev --privileged localhost:5000/imager:${{ env.SBC_RK3588_TAG }}-${{ matrix.kernel }} \
          metal --arch arm64 \
            --overlay-image=localhost:5000/talos-sbc-rk3588-${{ matrix.kernel }}:${{ env.SBC_RK3588_TAG }} \
            --overlay-name=rk3588 \
            --overlay-option="board=${{ matrix.board.name }}" \
            --overlay-option="chipset=${{ matrix.board.chipset }}" \
            --base-installer-image="localhost:5000/talos-rk3588:${{ env.SBC_RK3588_TAG }}-${{ matrix.board.name }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare flashable image for upload
        run: |
          docker run --rm -t -v ./_out:/out alpine mv /out/metal-arm64.raw.xz /out/talos-${{ env.SBC_RK3588_TAG }}-${{ matrix.board.name }}-${{ matrix.kernel }}.raw.xz

      - uses: actions/upload-artifact@v4
        with:
          name: talos-metal-${{ matrix.board.chipset }}-${{ matrix.board.name }}-${{ env.SBC_RK3588_TAG }}-${{ matrix.kernel }}
          path: _out/talos-*.raw.xz
          compression-level: 0 # already compressed
          if-no-files-found: error

      - name: Cleanup
        if: always()
        run: |
          rm -rf _out
