name: default
concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
"on":
  push:
    branches:
      - main
      - release-*
    tags:
      - v*
  pull_request:
    branches:
      - main
      - release-*


env:
  PLATFORM: linux/arm64
  INSTALLER_ARCH: targetarch
  USERNAME: buyuliang
  TALOS_VERSION: v1.7.4
  REALKTEK_FIRMWARE_EXTENSION_IMAGE: ghcr.io/siderolabs/realtek-firmware:20240513@sha256:4ca40c2836c1cdb5105456186afd880925d72e81ee6b0ff69a40c9c05b7b74a4

jobs:
  sbc-rk3588:
    permissions:
      actions: read
      contents: write
      issues: read
      packages: write
      pull-requests: read
    runs-on:
      - self-hosted
    if: (!startsWith(github.head_ref, 'renovate/') && !startsWith(github.head_ref, 'dependabot/'))
    outputs:
      SBC_RK3588_TAG: ${{ steps.build-overlay.outputs.SBC_RK3588_TAG }}
    strategy:
      matrix:
        kernel:
          - bsp
    env:
      KERNEL_VARIANT: ${{ matrix.kernel }}
    steps:
      - name: gather-system-info
        id: system-info
        uses: kenchan0130/actions-system-info@v1.3.0
        continue-on-error: true
      - name: print-system-info
        run: |
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
          MEMORY_GB=$((${{ steps.system-info.outputs.totalmem }}/1024/1024/1024))

          OUTPUTS=(
            "CPU Core: ${{ steps.system-info.outputs.cpu-core }}"
            "CPU Model: ${{ steps.system-info.outputs.cpu-model }}"
            "Hostname: ${{ steps.system-info.outputs.hostname }}"
            "NodeName: ${NODE_NAME}"
            "Kernel release: ${{ steps.system-info.outputs.kernel-release }}"
            "Kernel version: ${{ steps.system-info.outputs.kernel-version }}"
            "Name: ${{ steps.system-info.outputs.name }}"
            "Platform: ${{ steps.system-info.outputs.platform }}"
            "Release: ${{ steps.system-info.outputs.release }}"
            "Total memory: ${MEMORY_GB} GB"
          )

          for OUTPUT in "${OUTPUTS[@]}";do
            echo "${OUTPUT}"
          done
        continue-on-error: true
      - name: Login to registry
        uses: docker/login-action@v3
        with:
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ghcr.io
          username: ${{ env.USERNAME }}
      - name: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

  boards:
    runs-on: self-hosted
    permissions:
      contents: write
      packages: write
    needs: [sbc-rk3588]
    strategy:
      matrix:
        kernel:
          - bsp
        board:
          - name: rock-5b
            chipset: rk3588
    env:
      SBC_RK3588_TAG: v1.0-2-g887279e
    steps:
      - name: Build installer image
        if: github.event_name != 'pull_request'
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu qemu-user-static qemu-system
          wget https://github.com/google/go-containerregistry/releases/download/v0.19.1/go-containerregistry_Linux_x86_64.tar.gz
          tar -xvf go-containerregistry_Linux_x86_64.tar.gz
          sudo chmod a+x crane
          sudo cp crane /usr/local/bin
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
          docker run --rm -t --platform=linux/arm64 -v ./_out:/out -v /dev:/dev --privileged ghcr.io/${{ env.USERNAME }}/imager:${{ env.SBC_RK3588_TAG }}-${{ matrix.kernel }} \
            installer --arch arm64 \
              --base-installer-image="ghcr.io/siderolabs/installer:${{ env.TALOS_VERSION }}" \
              --overlay-name=rk3588 \
              --overlay-image=ghcr.io/${{ env.USERNAME }}/talos-sbc-rk3588-bsp:${{ env.SBC_RK3588_TAG }} \
              --overlay-option="board=${{ matrix.board.name }}" \
              --overlay-option="chipset=${{ matrix.board.chipset }}"
 
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Push installer image
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | crane auth login ghcr.io --username "${{ env.USERNAME }}" --password-stdin
          crane push _out/installer-arm64.tar ghcr.io/${{ env.USERNAME }}/talos-rk3588:${{ env.SBC_RK3588_TAG }}-${{ matrix.board.name }}-${{ matrix.kernel }}

      - name: Build flashable image
        run: |
          ls _out
          docker run --rm -t --platform=linux/arm64 -v ./_out:/out -v /dev:/dev --privileged ghcr.io/${{ env.USERNAME }}/imager:${{ env.SBC_RK3588_TAG }}-${{ matrix.kernel }} \
          metal --arch arm64 \
            --overlay-image=ghcr.io/${{ env.USERNAME }}/talos-sbc-rk3588-${{ matrix.kernel }}:${{ env.SBC_RK3588_TAG }} \
            --overlay-name=rk3588 \
            --overlay-option="board=${{ matrix.board.name }}" \
            --overlay-option="chipset=${{ matrix.board.chipset }}" \
            --base-installer-image="ghcr.io/${{ env.USERNAME }}/talos-rk3588:${{ env.SBC_RK3588_TAG }}-${{ matrix.board.name }}-${{ matrix.kernel }}"
    
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/upload-artifact@v4
        with:
          name: talos-metal-${{ matrix.board.chipset }}-${{ matrix.board.name }}-${{ env.SBC_RK3588_TAG }}-${{ matrix.kernel }}
          path: _out/talos-*.raw.xz
          compression-level: 0 # already compressed
          if-no-files-found: error

      - name: Cleanup
        if: always()
        continue-on-error: true
        run: |
          crane auth logout ghcr.io
          # HACK: files are owned by root, (ab)use Docker as sudo
          docker run --rm -t -v ./_out:/out alpine sh -c 'rm -rf /out/*'

  release:
    runs-on: self-hosted
    needs: [boards]
    permissions:
      contents: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: Release
        uses: crazy-max/ghaction-github-release@v2
        with:
          files: |
            talos-*.raw.xz
